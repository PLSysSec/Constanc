uint64 load_limb(uint8 in[8]) {
  return
    ((uint64)in[0]) |
    (((uint64)in[1]) << 8) |
    (((uint64)in[2]) << 16) |
    (((uint64)in[3]) << 24) |
    (((uint64)in[4]) << 32) |
    (((uint64)in[5]) << 40) |
    (((uint64)in[6]) << 48) |
    (((uint64)in[7]) << 56);
}

void store_limb(uint8[8] out, uint64 in) {
  out[0] = in & 0xff;
  out[1] = (in >> 8) & 0xff;
  out[2] = (in >> 16) & 0xff;
  out[3] = (in >> 24) & 0xff;
  out[4] = (in >> 32) & 0xff;
  out[5] = (in >> 40) & 0xff;
  out[6] = (in >> 48) & 0xff;
  out[7] = (in >> 56) & 0xff;
}

/* Take a little-endian, 32-byte number and expand it into polynomial form */
void fexpand(uint64 output[5], uint8 in[32]) {
  output[0] = load_limb(in[0:8]) & 0x7ffffffffffff;
  output[1] = (load_limb(in[6:14]) >> 3) & 0x7ffffffffffff;
  output[2] = (load_limb(in[12:20]) >> 6) & 0x7ffffffffffff;
  output[3] = (load_limb(in[19:27]) >> 1) & 0x7ffffffffffff;
  output[4] = (load_limb(in[24:32]) >> 12) & 0x7ffffffffffff;
}

void swap_contents(uint64 a[5], uint64 b[5]) {
  for (uint32 i = 0 to 5) {
    uint64 x = a[i] ^ b[i];
    a[i] ^= x;
    b[i] ^= x;
  }
}

void cmult(uint64 resultx[5], uint64 resultz[5], secret uint8 n[32], uint64 q[5]) {
  uint64 nqpqx[5] = {0};
  uint64 nqpqz[5] = {1}; // XXX is this all 1s or just a single 1?
  uint64 nqx[5] = {1};
  uint64 nqz[5] = {0};
  uint64 nqpqx2[5] = {0};
  uint64 nqpqz2[5] = {1};
  uint64 nqx2[5] = {0};
  uint64 nqz2[5] = {1};

  arrcpy(nqpqx, q, 5);

  for (uint32 i = 0 to 32) {
    uint8 byte = n[31 - i];
    for (uint32 j = 0 to 8) {
      uint64 bit = byte >> 7; // secret

      if (bit == 1) { // secret
        swap_contents(nqx, nqpqx);
        swap_contents(nqz, nqpqz);
      }
      fmonty(nqx2, nqz2,
             nqpqx2, nqpqz2,
             nqx, nqz,
             nqpqx, nqpqz,
             q);
      if (bit == 1) { // secret
        swap_contents(nqx2, nqpqx2);
        swap_contents(nqz2, nqpqz2);
      }

      swap_pointer(nqx, nqx2);
      swap_pointer(nqz, nqz2);
      swap_pointer(nqpqx, nqpqx2);
      swap_pointer(nqpqz, nqpqz2);

      byte <<= 1;
    }
  }

  arrcpy(resultx, nqx, 5);
  arrcpy(resultz, nqz, 5);
}


public int32 curve25519_donna(public uint8 mypublic[32], const secret uint8 secret[32], const public uint8 basepoint[32]) {
  uint64 bp[5], x[5], z[5], zmone[5];
  uint8 e[32] = copy(secret); // secret

  e[0] &= 248;
  e[31] &= 127;
  e[31] |= 64;

  fexpand(bp, basepoint);
  cmult(x, z, e, bp);
  crecip(zmone, z);
  fmul(z, x, zmone);
  fcontract(mypublic, z);
  return 0;
}
