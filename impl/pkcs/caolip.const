// #define MAX_CAOINT_SIZE 4096
// #define NBITS 30
// #define MAX_CAOINT_LEN (MAX_CAOINT_SIZE / NBITS + 1) // == 137
// typedef long verylong[MAX_CAOINT_LEN] // eqv int32[137]
// typedef verylong CAO_int
// #define hLen 20
// #define nLen 512
// #define dbLen nLen-hLen-1 // == 491
// #define msgLen dbLen-hLen-1 // == 470

/* Compares two integers.
   Returns 1 (aa > bb), -1 (aa-bb) or 0 (aa=bb) */
int32 zcompare(secret int32 aa[137], secret int32 bb[137]) {
  for (int32 i = 137 to 0 by -1) {
    if (aa[i-1] > bb[i-1]) // secret
      return 1;
    if (bb[i-1] > aa[i-1]) // secret
      return -1;
  }
  return 0;
}

/* Calculates bb = a^e mod n.
   Assumes: RADIX^(MAX_CAO_INT_LEN - 1) <= n < RADIX^(MAX_CAO_INT_LEN)
          0 <= a < n
          e >= 0 */
/* Output cannot be input */
void zexpmod(verylong a, verylong e, verylong n, verylong bb) {
  int32 mem[137 << 1];
  int32 mocka[137];
  int32 dum1[137];
  int32 dum2[137];

  memzero(bb);
  bb[0] = 1;

  for (int32 i = 137 to 0 by -1) {
    int32 j = e[i-1];
    for (bool bit in j from NBITS - 1 down) {
      sq(bb, mem); // mem = bb^2
      zmod(mem, 137 << 1, n, dum1); // dum1 = mem % n
      mul(a, dum1, mem); // mem = a * dum1
      zmod(mem, 137 << 1, n, dum2); // dum2 = mem % n

      // dum1 = bb^2 % n
      // dum2 = a * (bb^2 % n) % n

      arrcpy(bb, bit ? dum2 : dum1);
    }
  }
}

// XXX there's a bunch of other functions in caolip that would benefit from porting
// but I'm too lazy to do them right now
