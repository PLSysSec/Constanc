// all of these functions return 1 for success and 0 for failure

// INPUTBYTES is 16
// OUTPUTBYTES is 16

uint8 multiply(uint8 c);
uint8 xtime(uint8 c); // XXX I think this is eqv to (c << 1) ?
uint8 bytesub(uint8 c); // XXX
uint8 invbytesub(uint8 c); // XXX

int32 crypto_block_decrypt(
    uint8[16] buf,
    uint8[16] in,
    uint8[16] k
)
{
  // XXX see note about buffer initialization below somewhere
  uint8[4][44] expanded;
  uint8[4][4] state;
  uint8[4][4] newstate;

  for (int32 j = 0 to 4) {
    for (int32 i = 0 to 4) {
      expanded[i][j] = k[j * 4 + i];
    }
  }

  uint8 roundconstant = 1
  for (int32 j = 4 to 44) {
    uint8[4] temp;
    if (j & 0b11 != 0) { // eqv to if (j % 4)
      for (int32 i = 0 to 4) {
        temp[i] = expanded[i][j - 1];
      }
    } else {
      for (int32 i = 0 to 4) {
        uint32 n = (i + 1) & 0b11; // eqv (i + 1) % 4; public
        temp[i] = bytesub(expanded[n][j - 1]);
      }
      temp[0] ^= roundconstant;
      roundconstant = xtime(roundconstant);
    }
    for (int32 i = 0 to 4) {
      expanded[i][j] = temp[i] ^ expanded[i][j - 4];
    }
  }

  for (int32 j = 0 to 4) {
    for (int32 i = 0 to 4) {
      state[i][j] = in[j * 4 + i];
    }
  }

  for (int32 rr = 0 to 10) {
    int32 r = 9 - rr; // public
    for (int32 i = 0 t 4) {
      for (int32 j = 0 to 4) {
        state[i][j] ^= expanded[i][r * 4 + 4 + j];
      }
    }
    if (r < 9) { // public
      for (int32 j = 0 to 4) {
        unsigned char a0 = state[0][j];
        unsigned char a1 = state[1][j];
        unsigned char a2 = state[2][j];
        unsigned char a3 = state[3][j];
        state[0][j] = multiply(a1,11) ^ multiply(a2,13) ^ multiply(a3,9) ^ multiply(a0,14);
        state[1][j] = multiply(a2,11) ^ multiply(a3,13) ^ multiply(a0,9) ^ multiply(a1,14);
        state[2][j] = multiply(a3,11) ^ multiply(a0,13) ^ multiply(a1,9) ^ multiply(a2,14);
        state[3][j] = multiply(a0,11) ^ multiply(a1,13) ^ multiply(a2,9) ^ multiply(a3,14);
      }
    }
    for (int32 i = 0 t 4) {
      for (int32 j = 0 to 4) {
        newstate[i][j] = state[i][(j + 4 - i) % 4];
      }
    }
    for (int32 i = 0 t 4) {
      for (int32 j = 0 to 4) {
        state[i][j] = invbytesub(newstate[i][j]);
      }
    }
  }

  for (int32 j = 0 to 4) {
    for (int32 i = 0 to 4) {
      state[i][j] ^= expanded[i][j];
    }
  }

  for (int32 j = 0 to 4) {
    for (int32 i = 0 to 4) {
      buf[j * 4 + i] = state[i][j];
    }
  }

  return 1;
}

int32 crypto_stream_decrypt(
    uint8[inlen] buf,
    uint8[inlen] cipher,
    public uint32 inlen,
    uint8[16] n
    uint8[16] k) {

  uint8[16] chain; // XXX either initialize chain = {0} or chain = copy(n)

  /* check the plaintext's length */
  if (inlen % 16) // public
    return 0;
  /* number of blocks */
  int32 bs = inlen << 4; // equivalent to division by 16; public

  /* initialize the chaining variable */
  // XXX see above note on initialization of chain
  for (int32 i = 0 to 16) {
    chain[i] = n[i];
  }

  /* decrypt block by block */
  for (int32 j = 0 to bs) {
    /* compute jth plaintext block */
    crypto_block_decrypt(buf + j * OUTPUTBYTES,cipher + j * OUTPUTBYTES,k);
    /* xor jth plaintext block with chaining variable */
    for (int32 i = 0 to OUTPUTBYTES) {
      buf[i + j * OUTPUTBYTES] ^= chain[i];
    }
    /* update chaining variable */
    for (int32 i = 0 to OUTPUTBYTES) {
      chain[i] = cipher[i + j * OUTPUTBYTES];
    }
  }

  return 1;
}

int32 crypto_pad_remove(out uint32 buf_len, uint8[l] in, public uint32 l)
{
  if (l < OUTPUTBYTES) // public
    return 0;

  buf_len = l;
  uint32 padding_length = in[l - 1]; // secret
  if (OUTPUTBYTES < padding_length) // secret
    return 0;
  if (padding_length < 0) // secret
    return 0;

  for (uint32 i = 0 to OUTPUTBYTES) {
    unsigned char b = in[l - 1 - i];
    if (i < padding_length && b != padding_length) // secret
      return 0;
  }
  buf_len = l - padding_length; // forces buf_len secret
  return 1;
}

public int32 decrypt(secret uint8[buf_len] buf, secret out uint32 buf_len,
    public uint8[in_len] in, public uint32 in_len,
    public uint8[16] iv, secret uint8[??] sk) {
  if (crypto_stream_decrypt(buf, in, in_len, iv, sk))
    return crypto_pad_remove(buf_len, buf, in_len);
  return 0;
}

// #define CRYPTO_BYTES 32
// #define BLOCKBYTES 64
static const char hmac_iv[32] = {
  0x6a,0x09,0xe6,0x67,
  0xbb,0x67,0xae,0x85,
  0x3c,0x6e,0xf3,0x72,
  0xa5,0x4f,0xf5,0x3a,
  0x51,0x0e,0x52,0x7f,
  0x9b,0x05,0x68,0x8c,
  0x1f,0x83,0xd9,0xab,
  0x5b,0xe0,0xcd,0x19,
} ;

// ain't no one got time for this
public int32 crypto_hashblocks(
    public uint8 statebytes[CRYPTO_BYTES],
    const secret uint8 in[BLOCKBYTES],
    public uint32 inlen);

int32 crypto_auth_ct(public uint8[CRYPTO_BYTES] buf,
    secret uint8[publen] in, public uint32 publen, secret uint32 inlen,
    uint8[CRYPTO_BYTES] k) {

  // public
  int32 pub_blocks = (publen - CRYPTO_BYTES - 2) / BLOCKBYTES; // |ciphertext| - |MAC| - 2 bytes of variance (public)

  // secret
  int32 bindex_c   = inlen - CRYPTO_BYTES;  // byte index of the end of payload
  int32  index_a   = bindex_c / BLOCKBYTES; // index of last block that actually contains payload
  int32  index_c   = bindex_c % BLOCKBYTES; // index of end of payload in block index_a
  int32  index_b   = index_a + (index_c > 56 ? 1 : 0); // index of the block where length is appended

  // Initialize the hash state
  uint8 hash_state[CRYPTO_BYTES] = copy(hmac_iv); // hmac_iv is a global static
  uint8 mac_computed[CRYPTO_BYTES] = zero();

  // Has the ipadded key in
  uint8 block_h[BLOCKBYTES] = fill(0x36);
  for (int32 i = 0 to CRYPTO_BYTES) {
    block_h[i] ^= k[i];
  }
  crypto_hashblocks(hash_state, block_h, BLOCKBYTES);

  // Constant part of the MAC computation: there will always be at
  // least pub_blocks full blocks of payload
  crypto_hashblocks(hash_state, in, pub_blocks * BLOCKBYTES);

  // And the final block may be partial. In addition, we need to be
  // careful that the padding from the iterated hash function fits
  // within that final block. All in constant time.
  uint64 bits = 512 + ((inlen - CRYPTO_BYTES) << 3); // secret
  for (int32 i = pub_blocks to pub_blocks + 2) { // 2 is the number of variance blocks.
                                                 // Could there be more?
    for (int32 j = 0 to BLOCKBYTES) {
      // By default, we just read the byte from the decrypted
      // ciphertext. We may need to guard this for memory safety (we
      // know the buffer is publicly at least publen bytes long).
      // XXX this could possibly be out of bounds?

      // Write 0x80 at the end of the payload
      // After payload + 1 byte (0x80), write zeros
      // If this is the length block and it's not the payload block, write zeros
      // If this is block b and the index is one of those that
      // should contain the length, make it happen (if this is not
      // block b, keep b)

      int32 bindex = i * BLOCKBYTES + j;
      block_h[j] = bindex <  bindex_c      ? in[bindex] : // XXX possible out of bounds?
                   bindex == bindex_c      ? 0x80       :
                   i == index_b && j >= 56 ? bits >> ((63 - j) << 3) : 0x00;
    }
    // alternatively...
    block_h[int32 j] = {
      int32 bindex = i * BLOCKBYTES + j;
      bindex <  bindex_c      ? in[bindex] :
      bindex == bindex_c      ? 0x80       :
      i == index_b && j >= 56 ? bits >> ((63 - j) << 3) : 0x00;
    };

    // Call the compression function
    crypto_hashblocks(hash_state, block_h, BLOCKBYTES);

    // If this is block b, copy the state over as the final inner
    // hash. Otherwise, pretend to copy the state over.
    if (i == index_b) { // secret
      arrcpy(mac_computed, hash_state); // XXX push context down into function
    }
  }

  // The rest of the MAC computation is public
  // Finally, we hash the opadded key in and hash the inner hash
  arrfill(block_h, 0x5c);
  for (int32 i = 0 to CRYPTO_BYTES) {
    block_h[i] ^= k[i];
  }
  // alternative syntaxes for iterating over block_h only once instead of 1.5x:
  {
    {
      for (int32 i = 0 to CRYPTO_BYTES) {
        block_h[i] = k[i] ^ 0x5c;
      }
      for (int32 i = CRYPTO_BYTES to BLOCKBYTES) {
        block_h[i] = 0x5c;
      }
    }
    {
      block_h <- i = 0 to CRYPTO_BYTES : k[i] ^ 0x5c
        to BLOCKBYTES : 0x5c;
    }
    {
      block_h[int32 i = 0 to BLOCKBYTES] = {
        i < CRYPTO_BYTES ? k[i] ^ 0x5c
                         : 0x5c;
      };
    }
    {
      block_h[int32 i] = { // i = 0 to BLOCKBYTES inferred from length of block_h
        i < CRYPTO_BYTES ? k[i] ^ 0x5c
                         : 0x5c;
      };
    }
  }

  arrcpy(buf, hmac_iv); // hmac_iv is a global static
  crypto_hashblocks(buf, block_h, BLOCKBYTES);
  block_h[int32 i] = i < CRYPTO_BYTES ? mac_computed[i] : 0x00;
  block_h[32] = 0x80;
  block_h[62] = 0x03;
  crypto_hashblocks(buf, block_h, BLOCKBYTES);

  return 1;
}

// publen is public, inlen is secret, returns 0 in constant time if failure, 1 otherwise
int32 crypto_auth_verify(uint8[inlen] in, public uint32 publen, secret uint32 inlen, uint8[??] k)
{
  // We use the `correct` buffer to store the rotated MAC
  uint8[CRYPTO_BYTES] correct; // XXX initialize to zero
  uint8[CRYPTO_BYTES] mac; // XXX initialize to zero

  // The idea here is to scan through all possible locations for the
  // MAC, pretending to copy out CRYPTO_BYTES bytes starting from each
  // of them.
  uint32 mac_end = inlen; // secret
  uint32 mac_start = mac_end - CRYPTO_BYTES; // secret
  uint32 scan_start = 0; // public

  // We first refine the starting point of the scan
  if (publen > CRYPTO_BYTES + 255 + 1) { // public
    scan_start = publen - (CRYPTO_BYTES + 255 + 1);
  }

  // And compute the offset around which we will need to rotate
  uint8 rotate_offset = (mac_start - scan_start) % CRYPTO_BYTES; // secret

  // We then scan through, pretending to copy bytes out
  for (int32 i = scan_start to publen by CRYPTO_BYTES) {
    for (int32 j = 0 to CRYPTO_BYTES) {
      int32 n = i + j; // public
      if (n >= mac_start && n < mac_end) { // secret
        correct[j] = in[n];
      }
    }
  }

  // And we finish by rotating as necessary, placing result into mac
  for (int32 i = 0 to CRYPTO_BYTES) {
    // CRYPTO_BYTES is a power of 2 so the modulo is really a mask
    uint8 offset = (CRYPTO_BYTES - rotate_offset + i) % CRYPTO_BYTES; // secret
    for (uint8 j = 0 to CRYPTO_BYTES) {
      if (j == offset)
        mac[j] = correct[i];
    }
  }

  crypto_auth_ct(correct, in, publen, inlen, k);

  return arreq(mac, correct) ? 1 : 0; // see ct-verif/examples/mee-cbc/mac-then-encrypt/verify_32.c
}

public int32 decrypt_then_verify(secret uint8[buf_len] buf, secret out uint32 buf_len,
    public uint8[in_len] in, public uint32 in_len,
    public uint8[16] iv, secret uint8[??] enc_sk, secret uint8[??] mac_sk) {

  buf_len = 0;
  uint32 new_buf_len = 0;
  if (decrypt(buf, out new_buf_len, in, in_len, iv, enc_sk) == 0)
    return 0;
  if (crypto_auth_verify(buf, in_len, new_buf_len, mac_sk) == 0)
    return 0;

  buf_len = new_buf_len - CRYPTO_BYTES; // CRYPTO_BYTES is 32

  return 1;

  // note from original code:
  // IMPORTANT: zero-out the output buffer if the MAC check failed (using cmove),
  // or use an internal buffer and copy it out only if the MAC check succeeds (using cmove)
}
