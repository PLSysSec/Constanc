int32 CRYPTO_memcmp(uint8[len] a, uint8[len] b, public size_t len) {
    for (size_t i = 0 to len) {
        if (a[i] != b[i])
            return false;
        // rval |= rnset & (a[i] != b[i]) & FALSE
        //     => noop
        // rnset &= ~(a[i] != b[i])
    }
    return true;
    // rval |= rnset & TRUE
    //     => rval |= rnset
    // rnset &= ~TRUE
    //     => rnset &= FALSE
    //     => rnset = FALSE
}

/* C wrapper */
int tls1_cbc_remove_padding(const SSL *s,
                            SSL3_RECORD *rec,
                            size_t block_size, size_t mac_size)
{
    size_t padding_length;
    const size_t overhead = 1 /* padding length byte */  + mac_size;
    /* Check if version requires explicit IV */
    if (SSL_USE_EXPLICIT_IV(s)) {
        /*
         * These lengths are all public so we can test them in non-constant
         * time.
         */
        if (overhead + block_size > rec->length)
            return 0;
        /* We can now safely skip explicit IV */
        rec->data += block_size;
        rec->input += block_size;
        rec->length -= block_size;
        rec->orig_len -= block_size;
    } else if (overhead > rec->length)
        return 0;

    padding_length = rec->data[rec->length - 1];

    if (EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_read_ctx)) &
        EVP_CIPH_FLAG_AEAD_CIPHER) {
        /* padding is already verified */
        rec->length -= padding_length + 1;
        return 1;
    }

    size_t new_length;
    int ret = tls1_cbc_remove_padding_const(rec->data, rec->length, padding_length, overhead, &new_length);
    rec->length = new_length;
    return ret;
}

public int32 tls1_cbc_remove_padding_const(secret uint8[length] data, public size_t length,
    secret size_t padding_length, public size_t overhead, secret out size_t new_length) {
    if (length < overhead + padding_length) // secret
        return -1;

    /*
     * The padding consists of a length byte at the end of the record and
     * then that many bytes of padding, all with the same value as the length
     * byte. Thus, with the length byte included, there are i+1 bytes of
     * padding. We can't check just |padding_length+1| bytes because that
     * leaks decrypted information. Therefore we always have to check the
     * maximum amount of padding possible. (Again, the length of the record
     * is public information so we can use it.)
     */
    public uint32 to_check = 256;            /* maximum amount of padding, inc length byte. */
    if (to_check > unsafe_public(length)) // public
        to_check = unsafe_public(length);

    for (uint32 i = 0 to to_check) {
        if (data[length - 1 - i] != padding_length)
            return -1;
    }

    new_length = length - padding_length - 1;

    return 1;
}
