secret int32 get100() {
  secret int32 x = 666;
  secret int32 x2 = 100;
  x = 10;
  return x2;
}

secret int32 identity(secret int32 my_int) {
  return my_int;
}

secret int32 mutateArray(secret int32[5] arr) {
  arr[4] = 44;
  return arr[4];
}

secret int32 mutateArray2(secret int32[5] arr2, secret int32 val) {
  arr2[4] = val;
  uint32 f = 4;
  return arr2[f];
}

secret int32 simpleIf(secret int32 cond) {
  if (10 > cond) {
    return 1;
  } else {
    return 2;
  }
}

secret int32 mediumComplexIf(secret int32 cond) {
  secret int32 complex_ret = 10;
  if (10 > cond) {
    complex_ret = 1;
  } else {
    complex_ret = 2;
  }
  return complex_ret;
}

secret int32 mixedIf(secret int32 cond) {
  secret int32 complex_ret = 10;
  if (10 == cond) {
    return 1;
  } else {
    complex_ret = 2;
  }
  return complex_ret;
}

secret int32 mixedIf2(secret int32 cond) {
  secret int32 complex_ret = 10;
  if (10 > cond) {
    complex_ret = 1;
  } else {
    return 2;
  }
  return complex_ret;
}

secret int32 nestedIf(secret int32 cond) {
  if (10 > cond) {
    if (5 > cond) {
      return 1;
    } else {
      return 2;
    }
  } else {
    if (15 > cond) {
      return 3;
    } else {
      return 4;
    }
  }
}

public int32 simpleLoop() {
  for (uint32 i = 0 to 10) {
    secret int32 a = 666;
  }
  return 10000;
}

secret int32 loopAcc() {
  secret int32 acc = 0;
  for (uint32 i = 0 to 5) {
    acc = acc + 1;
  }
  return acc;
}

public int32 loopAssignArray(secret uint32[5] arr) {
  for (uint32 i = 0 to 5) {
    arr[i] = i;
  }
  return 10000;
}

public int32 add(public int32 a, public int32 b) {
  return a + b;
}

public int32 add10And20() {
  return add(10, 20);
}

secret int32 addAll(secret int32[5] arr) {
  secret int32 acc = 0;
  for (uint32 i = 0 to 5) {
    acc = acc + arr[i];
  }
  return acc;
}

secret int32 multiply(secret int32 a, secret int32 b) {
  return a * b;
}

secret bool equal(secret int32 a, secret int32 b) {
  return a == b;
}

secret bool nequal(secret int32 a, secret int32 b) {
  return a != b;
}

secret int32 lshift(secret int32 num, secret uint32 shift) {
  return num << shift;
}

secret int32 rshift(secret int32 num, secret uint32 shift) {
  return num >> shift;
}

secret bool gt(secret int32 a, secret int32 b) {
  return a > b;
}

secret bool gte(secret int32 a, secret int32 b) {
  return a >= b;
}

secret bool lt(secret int32 a, secret int32 b) {
  return a < b;
}

secret bool lte(secret int32 a, secret int32 b) {
  return a <= b;
}

secret int32 neg(secret int32 a) {
  return -a;
}

secret int32 xor(secret int32 a, secret int32 b) {
  return a ^ b;
}

secret int32 prec(secret int32 a) {
  if (a == 1) {
    return 2 + 3 * 4;
  } else {
    if (a == 2) {
      return (2 + 3) * 4;
    } else {
      if (a == 3) {
        return -2 + 3;
      } else {
        return -1;
      }
    }
  }
}

secret int32 opassign() {
  secret int32 a = 1;
  a += 5; // 6
  a -= 2; // 4
  a *= 3; // 12
  a <<= 3; // 12 * 8
  a >>= 2; // 24 == 0b11000
  a &= 0b101011; // 0b1000
  a |= 0b0101; // 0b1101
  a ^= 0b0110; // 0b1011 == 11
  return a;
}

public int32 add5int8(public int8 num) {
  return num + 5;
}

public int32 complicatedAdd5(public int32 num) {
  int8 five = 5;
  int32 one = 1;
  int32 six = five + 1;
  int8 smallSix = 1 + 5;
  return num + five;
}

public uint32 add5uint32(public uint32 num) {
  return num + 5;
}

public uint16 add5uint16(public uint16 num) {
  return num + 5;
}

public uint32 add5uintUnify(public uint16 num) {
  return num + 5;
}
